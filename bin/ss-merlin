#!/bin/ash

SS_MERLIN_HOME=/opt/share/ss-merlin

DNSMASQ_CONFIG_DIR=${SS_MERLIN_HOME}/etc/dnsmasq.d
ACCELERATED_CONFIG=${DNSMASQ_CONFIG_DIR}/accelerated-domains.china.conf
GOOGLE_CONFIG=${DNSMASQ_CONFIG_DIR}/google.china.conf
APPLE_CONFIG=${DNSMASQ_CONFIG_DIR}/apple.china.conf

if [[ ! -f ${SS_MERLIN_HOME}/etc/ss-merlin.conf ]]; then
  cp ${SS_MERLIN_HOME}/etc/ss-merlin.sample.conf ${SS_MERLIN_HOME}/etc/ss-merlin.conf
fi
. ${SS_MERLIN_HOME}/etc/ss-merlin.conf

ansi_red="\033[1;31m"
ansi_green="\033[1;32m"
ansi_yellow="\033[1;33m"
ansi_std="\033[m"

stop_proxy() {
  set -e

  echo -e "$ansi_green Stop shadowsocks-asuswrt-merlin... $ansi_std"

  if [[ ! -f /tmp/ss-merlin-is-run ]]; then
    echo -e "$ansi_red ss-merlin is not running. $ansi_std"
    exit 1
  fi

  echo -e "$ansi_green Deleting service check and upgrade cron job... $ansi_std"
  cru d check-services-alive 2>/dev/null
  cru d check-iptables-rule 2>/dev/null

  echo -e "$ansi_green Removing user scripts... $ansi_std"
  sed -i "/ss-merlin start/d" /jffs/scripts/post-mount 2>/dev/null

  echo -e "$ansi_green Cleaning iptables rules... $ansi_std"
  ${SS_MERLIN_HOME}/scripts/clean_iptables_rule.sh

  echo -e "$ansi_green Stopping all services... $ansi_std"
  ${SS_MERLIN_HOME}/scripts/stop_all_services.sh

  echo -e "$ansi_green Cleaning dnsmasq configuration file... $ansi_std"

  sed -i "\#conf-dir=${SS_MERLIN_HOME}/etc/dnsmasq.d/,\*\.conf#d" /jffs/configs/dnsmasq.conf.add 2>/dev/null
  service restart_dnsmasq

  rm -f /tmp/ss-merlin-is-run 2>/dev/null

  echo -e "$ansi_green Stopped. $ansi_std"
}

start_proxy() {
  set -e

  echo -e "$ansi_green Start shadowsocks-asuswrt-merlin... $ansi_std"

  if [[ -f /tmp/ss-merlin-is-run ]]; then
    echo -e "$ansi_red ss-merlin is running, please stop it before start. $ansi_std"
    exit 1
  fi

  echo "Initializing dnsmasq..."
  if [[ -d "$DNSMASQ_CONFIG_DIR" ]]; then
    if [[ ! ${china_dns_ip} ]]; then
      china_dns_ip=119.29.29.29
    fi

    if [[ -s ${ACCELERATED_CONFIG}.bak ]]; then
      sed "s#114\.114\.114\.114#${china_dns_ip}#" ${ACCELERATED_CONFIG}.bak >${ACCELERATED_CONFIG}
    fi
    if [[ -s ${GOOGLE_CONFIG}.bak ]]; then
      sed "s#114\.114\.114\.114#${china_dns_ip}#" ${GOOGLE_CONFIG}.bak >${GOOGLE_CONFIG}
    fi
    if [[ -s ${APPLE_CONFIG}.bak ]]; then
      sed "s#114\.114\.114\.114#${china_dns_ip}#" ${APPLE_CONFIG}.bak >${APPLE_CONFIG}
    fi

    user_domain_name_whitelist=${SS_MERLIN_HOME}/rules/user_domain_name_whitelist.txt
    user_domain_name_blocklist=${SS_MERLIN_HOME}/rules/user_domain_name_blocklist.txt
    user_domain_name_gfwlist=${SS_MERLIN_HOME}/rules/user_domain_name_gfwlist.txt

    OLDIFS="$IFS" && IFS=$'\n'
    if [[ -f ${user_domain_name_whitelist} ]]; then
      rm -f ${DNSMASQ_CONFIG_DIR}/user-whitelist-domains.conf 2>/dev/null
      for i in $(cat ${user_domain_name_whitelist} | grep -v '^#'); do
        echo "server=/${i}/${china_dns_ip}" >>${DNSMASQ_CONFIG_DIR}/user-whitelist-domains.conf
        echo "ipset=/${i}/userwhitelist" >>${DNSMASQ_CONFIG_DIR}/user-whitelist-domains.conf
      done
    fi

    if [[ -f ${user_domain_name_blocklist} ]]; then
      rm -f ${DNSMASQ_CONFIG_DIR}/user-blocklist-domains.conf 2>/dev/null
      for i in $(cat ${user_domain_name_blocklist} | grep -v '^#'); do
        echo "address=/${i}/127.0.0.1" >>${DNSMASQ_CONFIG_DIR}/user-blocklist-domains.conf
      done
    fi

    if [[ -f ${user_domain_name_gfwlist} ]]; then
      rm -f ${DNSMASQ_CONFIG_DIR}/user-gfwlist-domains.conf 2>/dev/null
      for i in $(cat ${user_domain_name_gfwlist} | grep -v '^#'); do
        sed -i "/server=\/${i}\/.*/d" ${ACCELERATED_CONFIG}
        sed -i "/server=\/${i}\/.*/d" ${GOOGLE_CONFIG}
        sed -i "/server=\/${i}\/.*/d" ${APPLE_CONFIG}
        echo "ipset=/${i}/usergfwlist" >>${DNSMASQ_CONFIG_DIR}/user-gfwlist-domains.conf
      done
    fi
    IFS=${OLDIFS}
  fi

  echo -e "$ansi_green Creating post-mount task... $ansi_std"
  if [[ ! -f /jffs/scripts/post-mount ]]; then
    echo "#!/bin/ash" >/jffs/scripts/post-mount
    chmod +x /jffs/scripts/post-mount
  fi
  if ! grep -qs "^ss-merlin start$" /jffs/scripts/post-mount; then
    echo "ss-merlin start" >>/jffs/scripts/post-mount
  fi

  echo "Applying iptables rules..."
  ${SS_MERLIN_HOME}/scripts/apply_iptables_rule.sh

  echo "Starting all services..."
  ${SS_MERLIN_HOME}/scripts/start_all_services.sh

  echo "Updating dnsmasq configuration file..."
  if ! grep -qs "^conf-dir=${SS_MERLIN_HOME}/etc/dnsmasq.d/,\*\.conf$" /jffs/configs/dnsmasq.conf.add; then
    echo "conf-dir=${SS_MERLIN_HOME}/etc/dnsmasq.d/,*.conf" >>/jffs/configs/dnsmasq.conf.add
  fi
  service restart_dnsmasq

  echo "Creating cron jobs..."
  cru a check-services-alive "* * * * *" "$SS_MERLIN_HOME/scripts/start_all_services.sh"
  cru a check-iptables-rule "*/5 * * * *" "$SS_MERLIN_HOME/scripts/apply_iptables_rule.sh"
  cru a update-ip-whitelist "15 2 * * *" "$SS_MERLIN_HOME/scripts/update_ip_whitelist.sh"
  cru a update-dns-whitelist "15 3 * * *" "$SS_MERLIN_HOME/scripts/update_dns_whitelist.sh"
  cru a update-gfwlist "15 4 * * *" "$SS_MERLIN_HOME/scripts/update_gfwlist.sh"
  cru a upgrade-ss-merlin "20 6 * * *" "$SS_MERLIN_HOME/tools/upgrade.sh"

  touch /tmp/ss-merlin-is-run

  echo -e "$ansi_green Started. $ansi_std"
}

status_proxy() {
  set -e

  if [[ -f /tmp/ss-merlin-is-run ]]; then
    echo -e "$ansi_green Started $ansi_std"
  else
    echo -e "$ansi_red Stopped $ansi_std"
  fi
}

restart_proxy() {
  stop_proxy
  start_proxy
}

if [[ "$1" == 'stop' ]]; then
  stop_proxy
elif [[ "$1" == 'start' ]]; then
  start_proxy
elif [[ "$1" == 'restart' ]]; then
  restart_proxy
elif [[ "$1" == 'status' ]]; then
  status_proxy
elif [[ "$1" == 'upgrade' ]]; then
  ${SS_MERLIN_HOME}/tools/upgrade.sh
elif [[ "$1" == 'uninstall' ]]; then
  ${SS_MERLIN_HOME}/tools/uninstall.sh
else
  echo -e "$ansi_yellow Usage: ss-merlin start|stop|restart|status|upgrade|uninstall $ansi_std"
fi
